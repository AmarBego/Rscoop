name: Release Build

on:
  push:
    tags:
      - 'v*.*.*'

permissions:
  contents: write

jobs:
  build:
    runs-on: windows-latest
    env:
      NODE_VERSION: '20'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      # Cache Rust dependencies and build artifacts (cargo registry, git, and target dir)
      # Swatinem/rust-cache handles lockfile hashing and cache priming automatically.
      - name: Cache Rust build
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: |
            src-tauri -> target

      - name: Install system dependencies (UPX)
        run: choco install upx -y

      - name: Install project dependencies
        run: npm ci

      # One command builds frontend, compiles Rust, and bundles installers
      - name: Build & bundle application (Tauri)
        env:
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
        run: npm run tauri -- build

      - name: Extract metadata (product name & version)
        id: meta
        shell: pwsh
        run: |
          $cfg = Get-Content src-tauri/tauri.conf.json | ConvertFrom-Json
          "version=$($cfg.version)" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          "product=$($cfg.productName)" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

      - name: Compress executable with UPX
        run: upx --best --lzma src-tauri/target/release/${{ steps.meta.outputs.product }}.exe

      - name: Generate updater artifacts
        id: updater
        shell: pwsh
        run: |
          $msiPath = "./src-tauri/target/release/bundle/msi/${{ steps.meta.outputs.product }}_${{ steps.meta.outputs.version }}_x64_en-US.msi"
          $signature = Get-Content -Raw "$msiPath.sig"
          $date = Get-Date -Format "yyyy-MM-ddTHH:mm:ssZ"
          $json = @{
            version = "${{ steps.meta.outputs.version }}"
            pub_date = $date
            platforms = @{
              "windows-x86_64" = @{
                signature = $signature
                url = "https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/${{ steps.meta.outputs.product }}_${{ steps.meta.outputs.version }}_x64_en-US.msi"
              }
            }
          } | ConvertTo-Json -Depth 4
          
          Set-Content -Path "./update.json" -Value $json

      - name: Create GitHub Release with artifacts
        uses: ncipollo/release-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ github.ref_name }}
          name: ${{ github.ref_name }}
          bodyFile: RELEASE_NOTES.md
          draft: false
          prerelease: false
          artifacts: >-
            ./src-tauri/target/release/${{ steps.meta.outputs.product }}.exe,
            ./src-tauri/target/release/bundle/msi/${{ steps.meta.outputs.product }}_${{ steps.meta.outputs.version }}_x64_en-US.msi,
            ./src-tauri/target/release/bundle/msi/${{ steps.meta.outputs.product }}_${{ steps.meta.outputs.version }}_x64_en-US.msi.sig,
            ./update.json
          artifactErrorsFailBuild: true

