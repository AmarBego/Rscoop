name: Release Build and Upload

on:
  push:
    tags:
      - 'v*.*.*' # Trigger on version tags like v1.0.0

jobs:
  build-and-release-windows:
    runs-on: windows-latest
    permissions:
      contents: write # Needed to create releases
    env:
      NODE_VERSION: '20' # Specify your project's Node.js version

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Cache Node.js dependencies
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            **/node_modules
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            src-tauri/target/release
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          components: rust-src # May be needed for some crates

      - name: Install UPX
        run: choco install upx -y

      - name: Install frontend dependencies
        run: npm install

      - name: Run Vite build (frontend)
        # This corresponds to your `beforeBuildCommand`
        run: npm run build
        env:
          NODE_ENV: production  # Ensure production mode is used for the build
      - name: Build Rust application (executable only)
        # Builds the .exe in src-tauri/target/release/
        run: |
          cd src-tauri
          cargo build --release
          cd ..

      - name: Get app version and product name from tauri.conf.json
        id: app_info
        run: |
          $config = Get-Content src-tauri/tauri.conf.json | ConvertFrom-Json
          $version = $config.version
          $productName = $config.productName
          echo "version=$version" >> $env:GITHUB_OUTPUT
          echo "product_name=$productName" >> $env:GITHUB_OUTPUT
        shell: pwsh

      - name: Compress executable with UPX
        run: upx --best --lzma src-tauri/target/release/${{ steps.app_info.outputs.product_name }}.exe
      - name: Bundle application (MSI, NSIS installers)
        # This uses the already built (and UPX'd) executable
        # It will also ensure frontend assets from `frontendDist` are included
        run: npm run tauri -- bundle

      - name: List bundled artifacts for verification
        run: |
          echo "--- Main Executable ---"
          Get-ChildItem -Path src-tauri/target/release/${{ steps.app_info.outputs.product_name }}.exe
          echo "--- Bundles Directory ---"
          Get-ChildItem -Path src-tauri/target/release/bundle -Recurse
        shell: pwsh

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.app_info.outputs.version }}
          release_name: Release ${{ steps.app_info.outputs.version }}
          draft: false
          prerelease: false

      - name: Upload Release Assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./src-tauri/target/release/${{ steps.app_info.outputs.product_name }}.exe
          asset_name: ${{ steps.app_info.outputs.product_name }}.exe
          asset_content_type: application/octet-stream

      - name: Upload Installer
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./src-tauri/target/release/bundle/msi/${{ steps.app_info.outputs.product_name }}_${{ steps.app_info.outputs.version }}_x64_en-US.msi
          asset_name: ${{ steps.app_info.outputs.product_name }}_${{ steps.app_info.outputs.version }}_x64_en-US.msi
          asset_content_type: application/octet-stream

      - name: Upload Setup
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./src-tauri/target/release/bundle/nsis/${{ steps.app_info.outputs.product_name }}_${{ steps.app_info.outputs.version }}_x64-setup.exe
          asset_name: ${{ steps.app_info.outputs.product_name }}_${{ steps.app_info.outputs.version }}_x64-setup.exe
          asset_content_type: application/octet-stream
